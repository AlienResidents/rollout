#!/usr/bin/perl -w
# This step creates system users and groups
# vim:tw=100 sw=2 expandtab ft=perl

# Available skip_steps items:
#  users - Create and update user entries
#  groups - Create and update group entries
#  force_password - Reset user's passwords if they have changed them

validate_config {
  group => {
    type => "hash",
    key => {
      help => "Group name",
      type => "string",
    },
    value => {
      help => "Group definition",
      type => [ "options", "undef" ],
      options => {
        gid => { type => "int" },
      },
    },
  },
  users => {
    type => "hash",
    key => {
      help => "Username",
      type => "string",
    },
    value => {
      type => [ "options", "undef" ],
      options => {
        force_password => { type => "boolean" },
        gid => { type => "int" },
        groups => { type => "list", items => { type => "string" } },
        home => { type => "path" },
        name => { type => "string" },
        password => { type => "string" },
        shell => { type => "path" },
        ssh_keys => { type => "list", items => { type => "string" } },
        uid => { type => "int" },
        homedir_mode => { type => "int", range => [0, 07777], help => "Mode for home directory" },
      },
    },
  },
};

my %groups = flatten_hash(c("$hostname/group"));
my %users = flatten_hash(c("$hostname/users"));

if (i_should("groups")) {
  # Deal with groups first
  v "Checking groups: ". join(" ", keys %groups);
  while (my($name, $group) = each(%groups)) {
    next unless defined $group;
    my $gid = getgrnam($name);
    if (!$gid) {
      # Create Group
      l("Create group $name");
      command("groupadd", ($group->{gid} ? ("-g", $group->{gid}, "-f") : ()), $name);
    } else {
      # Group exists
      if ($group->{gid} && $group->{gid} != $gid) {
        l("Update gid for $name");
        command("groupmod", "-g", $group->{gid}, "-o", $name);
      }
    }
  }
}


# Now all the users
if (i_should("users")) {
  v "Checking groups: ". join(" ", keys %users);

  while (my($username, $user) = each(%users)) {
    next unless defined $user;
    $user->{name} ||= "";
    $user->{name} =~ s/\$hostname/$hostname/;
    $user->{homedir_mode} ||= 0750;

    my($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell, $expire) =
      getpwnam($username);

    if (!$name) {
      # Create User
      l "Create user $username";
      command("useradd",
        ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
        ($user->{gid} ? ("-g", $user->{gid}) : ()),
        ($user->{groups} ? ("-G", join(",", @{$user->{groups}})) : ()),
        ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
        ($user->{password} ? ("-p", $user->{password}) : ()),
        ($user->{name} ? ("-c", $user->{name}) : ()),
        ($user->{shell} ? ("-s", $user->{shell}) : ()),
        $username
      );
    } else {
      # User exists
      delete $user->{force_password} unless i_should("force_password");
      my $modify = 0;
      $modify++ if $user->{uid} && $user->{uid} != $uid;
      $modify++ if $user->{home} && ($user->{home} ne $dir || !-d $dir);
      $modify++ if $user->{password} && $user->{password} ne $passwd
                   && $user->{force_password};
      $modify++ if $user->{shell} && $user->{shell} ne $shell;
      $modify++ if $user->{name} && $user->{name} ne $gcos;
      if ($user->{groups}) {
        foreach (@{$user->{groups}}) {
          my($gname,$gpasswd,$ggid,$gmembers) = getgrnam($_);
          if ($gname) {
            if (!grep({ $_ eq $name } split(/ /, $gmembers))) {
              v "$name should be in ". join(" ", @{$user->{groups}}). ", but isn't in all";
              $modify++;
            }
          }
        }
      }
      if ($modify) {
        l "Updating user $username";
        command("usermod",
          ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
          ($user->{gid} ? ("-g", $user->{gid}) : ()),
          ($user->{groups} ? ("-a", "-G", join(",", @{$user->{groups}})) : ()),
          ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
          ($user->{password} && $user->{force_password}
            ? ("-p", $user->{password}) : ()),
          ($user->{name} ? ("-c", $user->{name}) : ()),
          ($user->{shell} ? ("-s", $user->{shell}) : ()),
          $username
        );
      }
      $user->{uid} ||= $uid;
      $user->{gid} ||= $gid;
    }

    dir_check(-dir => $user->{home}, -mode => $user->{homedir_mode}, -uid => $user->{uid} || 0,
              -gid => $user->{gid} || 0)
      if $user->{home};
  }
}


# Remove users and groups that are not required
if (i_should("users")) {
  while (my($username, $user) = each(%users)) {
    next if defined $user;
    next unless my $uid = getpwnam($username);
    l "Delete user $username";
    command("userdel", $username);
  }
}

if (i_should("groups")) {
  while (my($name, $group) = each(%groups)) {
    next if defined $group;
    next unless my $gid = getgrnam($name);
    l "Delete group $name";
    command("groupdel", $name);
  }
}


