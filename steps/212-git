#!/usr/bin/perl -w
# GIT checkout
# vim:tw=100 sw=2 expandtab ft=perl

validate_config {
  git => {
    type => "hash",
    key => {
      help => "Destination local path to check out to",
      type => "path",
    },
    value => {
      type => "options",
      options => {
        source => { type => "string", required => 1 },
        branch => { type => "string" },
        cmd => { type => "string", help => "Post checkout command to run (in checked out dir)" },
        clone_options => { type => "list", items => { type => "string" } },
        pull_options => { type => "list", items => { type => "string" } },
      },
    },
  },
};

return unless i_has('git');
my %git = flatten_hash(c("$hostname/git"));
package_check("git-core") if keys %git && (c("$hostname/_os_detection/distro") eq 'ubuntu' ||
                                           c("$hostname/_os_detection/distro") eq 'debian');
while (my($dir, $x) = each(%git)) {
  if (!-d $dir) {
    # New checkout
    my $basedir = dirname($dir);
    dir_check($basedir);
    chdir $basedir or throw LocalFileException "Could not cd to new dir $basedir: $!";
    v "Checking out $x->{source} to $dir";
    my @cmd = ("git", "clone", );
    push @cmd, "--branch", $x->{branch} if $x->{branch};
    push @cmd, @{$x->{clone_options} || []};
    push @cmd, $x->{source}, $dir;
    command(@cmd);
    if ($x->{cmd}) {
      chdir $dir or throw LocalFileException "Could not cd to new checked out dir $dir: $!";
      command($x->{cmd});
    }
  } else {
    # Update existing checked out directory
    chdir $dir;
    my @cmd = ("git", "pull");
    push @cmd, @{$x->{pull_options} || []};
    v "Updating $dir from $x->{source}";
    command(@cmd);
  }
}
