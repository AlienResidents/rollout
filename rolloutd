#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl

package RolloutServer;

use strict;
use File::Spec::Functions qw( canonpath );
use HTTP::Server::Simple::CGI;
use HTTP::Server::Simple::Static;
use IO::Dir;
use Net::Netmask;
use URI::Escape;

use base qw( HTTP::Server::Simple::CGI );

sub new {
  my($class, $listen, $allow) = @_;
  my $self = bless(new HTTP::Server::Simple::CGI, $class);

  $self->{allow} = [];
  foreach (split /,/, $allow) {
    my $net = new Net::Netmask $_;
    push @{$self->{allow}}, $net;
  }

  my($address, $port) = split /:/, $listen;
  $self->host($address);
  $self->port($port);

  return $self;
}


sub handle_request {
  my($self, $cgi) = @_;
  my $path = canonpath(uri_unescape($cgi->path_info()));

  printf STDERR "%s %s %s [%s] \"%s %s %s\" %s %s\n",
    $cgi->remote_host(), "-", "-", scalar(localtime()), $cgi->request_method(),
    $path, "HTTP/1.0", "200", 0;

  my $found = 0;
  foreach (@{$self->{allow}}) {
    $found++ if $_->match($cgi->remote_host());
  }
  if (!$found || $path eq '/') {
    print "HTTP/1.0 403 Not Allowed\n\n";
    print "Not allowed to access $path\n";
  }

  my $localpath = canonpath(uri_unescape($path));
  if (-d $localpath) {
    print "HTTP/1.0 200 OK\n";
    print "Content-Type: text/html\n\n";
    print "<html><body><h1>Directory Listing of $path</h1>\n";
    my $dir = new IO::Dir $localpath;
    foreach (sort $dir->read()) {
      next if /^\./;
      $_ .= "/" if -d "$localpath/$_";
      print "<img src=\"file.jpg\" alt=\"file\"><a href=\"$_\">$_</a> <br>\n";
    }
    print "</body></html>\n";
    return;
  }

  if (!$self->serve_static($cgi, ".")) {
    print "HTTP/1.0 404 Not Found\n\n";
    print "The file you requested was not found\n";
  }
}

package main;

use strict;
use Carp;
use English;
use Fcntl ':flock';
use Getopt::Long;
use IO::File;
use POSIX;

my $server_base;
my $server_allow = "127.0.0.0/8";
my $server_listen = "0.0.0.0:80";
my $pidfile;
my $daemon = 0;
my $chroot = 0;
my $user;
my $group;
my $logfile = "/dev/null";

GetOptions(
  "allow=s"       => \$server_allow,
  "base=s"        => \$server_base,
  "listen=s"      => \$server_listen,
  "pidfile=s"     => \$pidfile,
  "daemon|d"      => \$daemon,
  "chroot|c"      => \$chroot,
  "user=s"        => \$user,
  "group=s"       => \$group,
  "logfile=s"     => \$logfile,
  "help|?"        => \&usage,
) or usage();

sub usage {
  print "Command line arguments are:\n";
  print " allow   A comma-separated list of netmasks to allow access\n";
  print " base    The base of the directory tree served by rollout server\n";
  print " listen  The ip:port combo to listen on\n";
  print " daemon  Fork and become a background process\n";
  print " pidfile Write process ID to this file after backgrounding\n";
  print " chroot  Chroot to the base directory\n";
  print " user    Become this user after backgrounding\n";
  print " group   Become this group after backgrounding\n";
  print "\n";
  exit;
}

usage() unless $server_allow && $server_base && $server_listen;
$chroot = 1 if $daemon;

# Check for an existing rolloutd process
if (open(LOCKFILE, ">/var/lock/rolloutd.lock")) {
  die "There is already an instance of the Rollout server running\n"
    unless flock(LOCKFILE, LOCK_EX | LOCK_NB);
}

# Prepare to write out the process ID, potentially after forking
my $pidfh = new IO::File $pidfile, "w" or die "Unable to write to $pidfile: $!"
  if $pidfile;
chdir($server_base) or die "Couldn't chdir to $server_base: $!";

# Resolve user and group to drop privileges
my($uid, $gid) = ($user, $group);
$uid = getpwnam($user) if $user && $user !~ /^\d+$/;
$gid = getgrnam($user) if $group && $group !~ /^\d+$/;
die "Could not find user $user\n" if $user && !defined($uid);
die "Could not find group $group\n" if $group && !defined($uid);

if ($daemon) {
  # Become a daemon
  defined(my $pid = fork()) or die "Couldn't fork: $!";
  exit if $pid;
  $SIG{HUP} = 'IGNORE';
  setsid or die "Couldn't start a new session: $!";
  open STDIN, "/dev/null";
  open STDOUT, ">>$logfile";
  open STDERR, ">>$logfile";
  umask 0;
  exit if fork();
}

# Drop privilieges
chroot($server_base) if $chroot;
$UID = $EUID = $uid if $user;
$GID = $EGID = $gid if $group;

# Write out process ID
if ($pidfile) {
  print $pidfh "$$\n";
  $pidfh->close;
}

# Handle kill signals gracefully
$SIG{INT} = $SIG{QUIT} = sub {
  close(LOCKFILE);
  unlink("/var/lock/rolloutd.lock");
  unlink($pidfile) if $pidfile;
  exit 0;
};

# By this point, we should have dropped all extra privileges and be ready to run as a daemon
my $server = new RolloutServer($server_listen, $server_allow);
$server->run();

# Should never get to here, but clean up just in case
close(LOCKFILE);
unlink("/var/lock/rolloutd.lock");
unlink($pidfile) if $pidfile;
